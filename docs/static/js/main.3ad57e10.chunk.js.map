{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputVal","setInputVal","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"uLAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEZC,mBAAS,IAFG,mBAErCC,EAFqC,KAE3BC,EAF2B,KAiB5C,OACI,0BAAMC,SAVW,SAACC,GAClBA,EAAEC,iBACEJ,EAASK,OAAOC,OAAS,IACzBR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAiBO,OACnCN,EAAY,OAOZ,2BACIO,KAAK,OACLC,MAAQT,EACRU,SAlBW,SAACP,GACpBF,EAAYE,EAAEQ,OAAOF,Y,uBCLhBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAYZM,GAZY,4CAAH,sDCDPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAIpC,OACI,yBAAKc,UAAU,2CACX,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAIA,KCHHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECHX,SAACA,GAAc,IAAD,EACZd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAkBtC,OAZAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAM,SAAAC,GACHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAItB,CAACpB,IAGGqB,EDbuBK,CAAa1B,GAA/Ba,EAFuB,EAE5BN,KAAYa,EAFgB,EAEhBA,QAEnB,OACI,oCACI,4BAAKpB,GACJoB,GAAW,sCAEZ,yBAAKJ,UAAU,aAIPH,EAAOJ,KAAK,SAACC,GAAD,OACR,kBAAC,EAAD,eACIiB,IAAKjB,EAAIC,IACLD,UEOjBkB,EAzBM,WAAO,IAAD,EAEa1C,mBAAS,CAAC,QAFvB,mBAEhB2C,EAFgB,KAEJ5C,EAFI,KAIvB,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEA,4BAEQ4C,EAAWpB,KAAI,SAAAT,GAAQ,OACnB,kBAAC,EAAD,CACI2B,IAAK3B,EACLA,SAAUA,U,MCZtC8B,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.3ad57e10.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({setCategories}) => {\n\n    const [inputVal, setInputVal] = useState('');\n\n    const handleInputVal = (e) => {\n        setInputVal(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (inputVal.trim().length > 2) {\n            setCategories(cats => [inputVal,...cats]);\n            setInputVal('');\n        } \n          \n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input \n                type='text'\n                value= {inputVal}\n                onChange= {handleInputVal}\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","\n\n\nexport const getGifs = async(category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&api_key=niJdg7uCY5PFNrEwG7rutVFLuw1Z8FhG&limit=10`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n    return gifs;\n    \n}","import React from 'react'\n\nexport const GifGridItem = ({id, title, url}) => {\n\n    //console.log({id, title, url});\n\n    return (\n        <div className=\"card animate__animated animate__flipInX\">\n            <img src={url} alt={title} />\n            <p>{title}</p>\n        </div>\n    )\n}\n","//import React, { useState, useEffect } from 'react';\nimport React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n\n\nexport const GifGrid = ({category}) => {\n\n    const {data:images,loading} = useFetchGifs(category);\n\n    return ( \n        <>\n            <h3>{category}</h3>\n            {loading && <p>Loading</p>}\n         \n            <div className=\"card-grid\">\n                \n                \n                {\n                    images.map( (img) => (\n                        <GifGridItem \n                            key={img.id}\n                            {...img}\n                        />\n                    ))\n                }\n            </div>\n        </>\n    )\n}\n","import { useState, useEffect } from 'react';\nimport {getGifs} from '../helpers/getGifs'\n\nexport const useFetchGifs = (category) => {\n    const [state, setstate] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n        getGifs(category)\n            .then( imgs => {\n                setstate({\n                    data: imgs,\n                    loading: false\n                }) \n                \n            })\n    }, [category])\n\n\n    return state;\n}","import React,{useState} from 'react';\nimport {AddCategory} from './components/AddCategory'\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['DBZ' ]);\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={setCategories}/>\n            <hr/>\n\n            <ol>\n                { \n                    categories.map(category => (\n                        <GifGrid \n                            key={category} \n                            category={category}\n                        /> \n                    ))\n                }\n                \n            </ol>\n        </>\n    )\n};\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp'\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}